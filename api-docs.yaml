openapi: 3.0.0
info:
  title: SkipCast API
  description: API documentation for SkipCast streaming platform
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Local development server
  - url: https://api.skipcast.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, dj]
        avatar:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    Channel:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        category:
          type: string
        state:
          type: string
          enum: [on, off]
        active:
          type: string
          enum: [active, inactive, trash]
        privacy:
          type: string
          enum: [private, public]
        views:
          type: integer
        likes:
          type: integer
        max_listeners:
          type: integer
        current_listeners:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
                - role
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                password_confirmation:
                  type: string
                role:
                  type: string
                  enum: [user, dj]
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/{provider}:
    get:
      tags:
        - Authentication
      summary: Redirect to social provider
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum: [google, facebook]
      responses:
        302:
          description: Redirect to provider

  /auth/{provider}/callback:
    get:
      tags:
        - Authentication
      summary: Handle social provider callback
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum: [google, facebook]
      responses:
        200:
          description: Social authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /channels:
    get:
      tags:
        - Channels
      summary: List all channels
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: privacy
          schema:
            type: string
            enum: [private, public]
      responses:
        200:
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'

    post:
      tags:
        - Channels
      summary: Create a new channel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - category
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                privacy:
                  type: string
                  enum: [private, public]
      responses:
        201:
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

  /channels/{id}:
    get:
      tags:
        - Channels
      summary: Get channel details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Channel details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

    put:
      tags:
        - Channels
      summary: Update channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                privacy:
                  type: string
                  enum: [private, public]
      responses:
        200:
          description: Channel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

    delete:
      tags:
        - Channels
      summary: Delete channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Channel deleted successfully

  /channels/{id}/state:
    put:
      tags:
        - Channels
      summary: Update channel streaming state
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
              properties:
                state:
                  type: string
                  enum: [on, off]
      responses:
        200:
          description: Channel state updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel' 